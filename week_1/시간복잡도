시간 복잡도 : 입력값과 문제를 해결하는 데 걸리는 시간과의 상관관계

각 줄이 실행되는 걸 1번의 연산이 된다고 생각하고 계산
[예시 1]
for num in array:              # array 의 길이만큼 아래 연산이 실행
    for compare_num in array:  # array 의 길이만큼 아래 연산이 실행
        if num < compare_num:  # 비교 연산 1번 실행
            break
        else:
            return num
-> array의 길이 X array의 길이 X 비교 연산 1번 =  N x N
= $N^2$

[예시 2]
max_num = array[0]     # 연산 1번 실행
for num in array:      # array 의 길이만큼 아래 연산이 실행
    if num > max_num:  # 비교 연산 1번 실행
	    max_num = num  # 대입 연산 1번 실행
-> max_num 대입 연산 1번 + array의 길이 X (비교 연산 1번 + 대입 연산 1번) = 1 + 2 x N
= 2N + 1

상수는 신경쓰지말고, 입력값에 비례해서 어느 정도로 증가하는지만 파악하면 된다.
📍 즉, $2N+1$의 연산량이 나온 첫번째 풀이 방법은 $N$ 만큼의 연산량이 필요하다
$N^2$ 의 연산량이 나온 두번째 풀이 방법은 $N^2$ 만큼의 연산량이 필요하다.

참고로, 만약 상수의 연산량이 필요하다면, $1$ 만큼의 연산량이 필요하다고 말하면 됩니다.